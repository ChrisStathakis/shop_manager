from django.shortcuts import render, reverse, get_object_or_404from django.views.generic import ListView, CreateView, UpdateViewfrom django.utils.decorators import method_decoratorfrom django.contrib.admin.views.decorators import staff_member_requiredfrom django_tables2 import RequestConfigfrom django.contrib import messagesfrom .forms import VoucherForm, BenefitForm, ProductRangeForm, VoucherRulesFormfrom .models import Voucher, Benefit, ProductRange, VoucherRulesfrom catalogue.models import Product, Category, Brandfrom .tables import (VoucherTable, VoucherProductForSelectTable, VoucherCategoryTable, VoucherBrandTable,                     BrandSelectedDataTable, CategorySelectedDataTable, ProductSelectedDataTable)from django_tables2 import RequestConfig@method_decorator(staff_member_required, name='dispatch')class VoucherListView(ListView):    model = Voucher    template_name = 'dashboard/list_page.html'    paginate_by = 30    def get_context_data(self, **kwargs):        context = super(VoucherListView, self).get_context_data(**kwargs)        page_title, back_url, create_url = 'Κουπόνια', reverse('point_of_sale:home'), reverse('vouchers:voucher_create')        queryset_table = VoucherTable(self.object_list)        RequestConfig(self.request).configure(queryset_table)        #  filters        active_filter, date_filter = [True] *2        context.update(locals())        return context@method_decorator(staff_member_required, name='dispatch')class VoucherCreateView(CreateView):    form_class = VoucherForm    model = Voucher    template_name = 'dashboard/form.html'    def get_success_url(self):        return self.new_voucher.get_edit_url()    def get_context_data(self, **kwargs):        context = super(VoucherCreateView, self).get_context_data(**kwargs)        form_title, back_url = 'Δημιουργία Νέου Κουπονιού', reverse('vouchers:voucher_list')        context.update(locals())        return context    def form_valid(self, form):        self.new_voucher = form.save()        messages.success(self.request, 'Το κουπόνι δημιουργήθηκε!')        return super().form_valid(form)@staff_member_requireddef voucher_detail_view(request, pk):    voucher, back_url = get_object_or_404(Voucher, id=pk), reverse('vouchers:voucher_list')    benefit, created = Benefit.objects.get_or_create(voucher=voucher)    rules, created_ = VoucherRules.objects.get_or_create(voucher=voucher)    range, create_r = ProductRange.objects.get_or_create(voucher=voucher)    benefit_form = BenefitForm(request.POST or None, instance=benefit)    rules_form = VoucherRulesForm(instance=rules)    range_form = ProductRangeForm(instance=range)    voucher_form = VoucherForm(instance=voucher)    context = locals()    return render(request, 'voucher/voucher_details.html', context)@staff_member_requireddef voucher_choose_products_view(request, pk):    voucher = get_object_or_404(Voucher, id=pk)    product_range = ProductRange.objects.get(voucher=voucher)    rule = VoucherRules.objects.get(voucher=voucher)    rule_type = rule.offer_type    qs = Product.my_query.active()    queryset_table = VoucherProductForSelectTable(qs)    if rule_type == 'category':        qs = Category.objects.filter(active=True)        queryset_table = VoucherCategoryTable(qs)    elif rule_type == 'brand':        qs = Brand.objects.filter(active=True)        queryset_table = VoucherBrandTable(qs)            selected_data = product_range.included_products.all()    selected_table = ProductSelectedDataTable(selected_data)    if rule_type == 'category':        selected_data = product_range.included_categories.all()        selected_table = ProductSelectedDataTable(selected_data)    if rule_type == 'brand':        selected_data = product_range.included_brands.all()        selected_table = BrandSelectedDataTable(selected_data)            RequestConfig(request).configure(queryset_table)    context = locals()    return render(request, 'voucher/choose_products.html', context)